# -*- coding: utf-8 -*-
"""ICA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lfgfv-P2rkilPil9-Jy-yWXugF5w-CR2
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_wine
from sklearn.datasets import load_diabetes
from sklearn.datasets import load_breast_cancer
from sklearn.decomposition import FastICA

class ICA:
  def __innit__(self):
    self.tranformed = None

  def fit(self, X):
    # center the data
    X_centered = X - np.mean(X, axis=0)

    # compute the covariance matrix
    cov_matrix = np.cov(X_centered.T)

    # compute the eigenvalues and eigenvectors
    eigenvalues, eigenvectors = np.linalg.eig(cov_matrix)

    # sort the eigenvalues and eigenvectors
    idx = eigenvalues.argsort()[::-1]
    eigenvalues = eigenvalues[idx]
    eigenvectors = eigenvectors[:, idx]

    # normalize the eigenvectors
    eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=0)

    # whiten the data
    X_whitened = X_centered.dot(eigenvectors)

    # estimate the mixing matrix
    A = np.linalg.pinv(eigenvectors).dot(X_whitened.T)

    # estimate the independent sourcesS = X_whitened.dot(A)
    X_projetado = X_whitened.dot(A)
    return X_projetado

data_set= load_wine()
X = data_set['data']
y = data_set['target']

ica = ICA()
X_projetado = ica.fit(X)
  # visualize the data
x1 = X_projetado[:,0]
x2 = X_projetado[:,1]

plt.scatter(x1, x2, c=y, edgecolor='none', alpha=0.7, cmap=plt.cm.get_cmap('viridis', 3))
plt.xlabel('Descriminante Linear 1')
plt.ylabel('Descriminante Linear 2')
plt.colorbar()
plt.show()

##Teste com o ICA da SKLEARN
data_set= load_wine()
X = data_set['data']
y = data_set['target']
ica = FastICA(n_components=2)
S_ = ica.fit_transform(X)  # estimated independent sources

# visualize the data
x1 = S[:,0]
x2 = S[:,1]

plt.scatter(x1, x2, c=y, edgecolor='none', alpha=0.7, cmap=plt.cm.get_cmap('viridis', 3))
plt.xlabel('Descriminante Linear 1')
plt.ylabel('Descriminante Linear 2')
plt.colorbar()
plt.show()

data_set= load_diabetes()
X = data_set['data']
y = data_set['target']
ica = ICA()
X_projetado = ica.fit(X)
  # visualize the data
x1 = X_projetado[:,0]
x2 = X_projetado[:,1]

plt.scatter(x1, x2, c=y, edgecolor='none', alpha=0.7, cmap=plt.cm.get_cmap('viridis', 3))
plt.xlabel('Descriminante Linear 1')
plt.ylabel('Descriminante Linear 2')
plt.colorbar()
plt.show()

data_set= load_breast_cancer()
X = data_set['data']
y = data_set['target']
ica = ICA()
X_projetado = ica.fit(X)
  # visualize the data
x1 = X_projetado[:,0]
x2 = X_projetado[:,1]

plt.scatter(x1, x2, c=y, edgecolor='none', alpha=0.7, cmap=plt.cm.get_cmap('viridis', 3))
plt.xlabel('Descriminante Linear 1')
plt.ylabel('Descriminante Linear 2')
plt.colorbar()
plt.show()